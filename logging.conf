[loggers]
keys = root,uvicorn,alembic,sqlalchemy.engine

[handlers]
keys = console,file_combined,file_errors

[formatters]
keys = json

# =============================================================================
# Logger Definitions
# =============================================================================
[logger_root]
level = %(log_level)s
handlers = console,file_combined,file_errors
qualname = root

[logger_uvicorn]
level = INFO
handlers = console
qualname = uvicorn
propagate = 0

[logger_alembic]
level = INFO
handlers = console
qualname = alembic
propagate = 0

[logger_sqlalchemy.engine]
level = WARNING
handlers = console
qualname = sqlalchemy.engine
propagate = 0

# =============================================================================
# Handler Definitions
# =============================================================================
[handler_console]
class = StreamHandler
level = %(log_level)s
formatter = json
args = (sys.stdout,)

[handler_file_combined]
class = logging.handlers.RotatingFileHandler
level = %(log_level)s
formatter = json
# Arguments for RotatingFileHandler(filename, mode, maxBytes, backupCount, encoding)
args = ('logs/combined.log', 'a', 10485760, 5, 'utf8')

[handler_file_errors]
class = logging.handlers.RotatingFileHandler
level = ERROR
formatter = json
# Arguments for RotatingFileHandler(filename, mode, maxBytes, backupCount, encoding)
args = ('logs/errors.log', 'a', 10485760, 5, 'utf8')

# =============================================================================
# Formatter Definitions
# =============================================================================
[formatter_json]
class = src.core.infrastructures.logging.CustomJsonFormatter
format = %(timestamp)s %(level)s %(name)s %(message)s %(pathname)s %(lineno)d